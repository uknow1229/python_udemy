# 集合型

# 重複がなくなる
a = {1, 2, 2, 3, 4, 4, 5, 6}
a
# {1, 2, 3, 4, 5, 6}
type(a)
# <class 'set'>

b = {2, 3, 3, 6, 7}
b
# {2, 3, 6, 7}

a - b
# {1, 4, 5}

b - a
# {7}

# aにもありbにもある
a & b
{2, 3, 6}

# aまたはbにある
a | b
{1, 2, 3, 4, 5, 6, 7}

# aかbにはあるが重複はしていないもの
a ^ b
{1, 4, 5, 7}

# 集合のメソッド
s = {1, 2, 3, 4, 5}

# リストと違いインデックスがない
s
# {1, 2, 3, 4, 5}

# エラーになる
s[0]

# 追加でデータを入れることができる
s.add(6)

s
# {1, 2, 3, 4, 5, 6}

s.add(6)
s
# {1, 2, 3, 4, 5, 6}

# 消したい時
s.remove(6)
s
# {1, 2, 3, 4, 5}

# 中身を空にする
s.clear()
s
# dictと見分けがつかなくなるのでこの形で返ってくる
set()

# 集合の使い所

# 例えば、ソーシャルメディアなどで共通の友達を探すなど、何かの共通点を見つけ出す時に使える

my_friends = {'A', 'C', 'D'}
A_friends = {'B', 'D', 'E', 'F'}

# どちらの友達でもある
print(my_friends & A_friends)
# {'D'}

# リストをセットに型変換することもできる

# 例えば、自分が購入した果物をリストに追加していくアプリケーションがあるとする
f = ['apple', 'banana', 'apple', 'banana']

# どんな種類の果物を買ったのか？重複を削除
# リストから集合に型を変える
# 追加していくときにリストを扱うが、ユニークなものだけを摘出したい時にこういった集合を使う
kind = set(f)
print(kind)


