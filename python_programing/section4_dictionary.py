# 辞書型

d = {'x': 10, 'y': 20}
d
{'x': 10, 'y': 20}
type(d)
# <class 'dict'>
d['x']
# 10
d['y']
# 20

d['x'] = 100
d
# {'x': 100, 'y': 20}

# 文字列も入る
d['x'] = 'XXXX'
d
# {'x': 'XXXX', 'y': 20}

# zというkey・valueを入れる
d['z'] = 100
d
# {'x': 'XXXX', 'y': 20, 'z': 200}

# この入れ方でもOK
d[1] = 10000
d
# {'x': 'XXXX', 'y': 20, 'z': 200, 1: 10000}

# dictの生成の仕方はこれでも作れる
dict(a=10, b=20)
{'a': 10, 'b': 20}

dict([('a', 10), ('b', 20)])
{'a': 10, 'b': 20}

# 辞書型のメソッド
d = {'x': 10, 'y': 20}
d
# {'x': 10, 'y': 20}

# ヘルプを使ってメソッドを見れる
help(d)

# keyだけ取りたい場合
d.keys()
# dict_keys(['x', 'y'])

# valueだけ取りたい場合
d.values()
# dict_values([10, 20])

# dictを他のdictにアップデートしたい場合
d2 = {'x': 1000, 'j' 500}
d
# {'x': 10, 'y': 20}

d2
# {'x': 1000, 'j': 500}

d.update(d2)
d
# {'x': 1000, 'y': 20, 'j': 500}
# xは1000になりjが追加された！

# dの中身を取る
d['x']
# 1000

# メソッドでもvalueが取れる
d.get('x')
# 1000

d.get('z')
r = d.get('z')
r
type(r)
# ない場合はNoneTypeを介して返ってくる
# <class 'NoneType'>

d.get('x')
# 1000

d
# {'x': 1000, 'y': 20, 'j': 500}

# key,valueが取り出される
d.pop('x')
# 1000

d
# {'y': 20, 'j': 500}

# key,valueが消える
del d['y']
d
# {'j': 500}

# 中身を空にする
d.clear()
d
# {}

# 指定の値があるか判定する
'a' in d
# True

'j' in d
# False

# 辞書のコピー
# リストと同様に気をつける

# 参照渡しとなるのでどちらも同じ値になる
x = {'a': 1}
y = x
y['a'] = 1000
print(x)
print(y)

# {'a': 1000}
# {'a': 1000}

# コピー
x = {'a': 1}
y = x.copy()
y['a'] = 100
print(x)
print(y)

# {'a': 1}
# {'a': 1000}

# 辞書の使い所

# 例えばオンラインストアで果物を売るサイト
# fruitsという変数に、辞書型で果物の名前と値段を入れていく場面
# keyで何かを検索して、その値をすぐ取ってきたいという場合に便利
# ハッシュテーブルというものを用いているので、リストより早く取り出せる
# 本の目次のイメージ

fruits = {
  'apple': 100,
  'banana': 200,
  'orange': 300,
}

print(fruits['apple'])
# 100

# リストで書こうと思えば書けるが、リストでアップルと入れてもすぐ出てこない
# appleがどこにあるか探して、見つかったら100というプログラムを書かなければいけない
# リストは検索するのに時間がかかる

l = [
  ['apple', 100],
  ['banana', 200],
  ['orange', 300]
]

